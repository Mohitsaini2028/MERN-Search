[{"D:\\Mohit\\Test\\MERN-Search\\frontend\\src\\index.js":"1","D:\\Mohit\\Test\\MERN-Search\\frontend\\src\\App.js":"2","D:\\Mohit\\Test\\MERN-Search\\frontend\\src\\reportWebVitals.js":"3","D:\\Mohit\\Test\\MERN-Search\\frontend\\src\\components\\Search.jsx":"4"},{"size":535,"mtime":1666370874599,"results":"5","hashOfConfig":"6"},{"size":176,"mtime":1666370968228,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1666370874782,"results":"8","hashOfConfig":"6"},{"size":2068,"mtime":1666503948802,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rn61xb",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"D:\\Mohit\\Test\\MERN-Search\\frontend\\src\\index.js",[],[],"D:\\Mohit\\Test\\MERN-Search\\frontend\\src\\App.js",[],[],"D:\\Mohit\\Test\\MERN-Search\\frontend\\src\\reportWebVitals.js",[],[],"D:\\Mohit\\Test\\MERN-Search\\frontend\\src\\components\\Search.jsx",["23"],[],"import React, { useState } from 'react'\r\n\r\nexport const Search = () => {\r\n\r\n    const [query, setQuery] = useState(\"\");\r\n    const [result, setResult] = useState([]);\r\n\r\n    async function getResults(){\r\n            try{\r\n         \r\n            const response = await fetch(`http://localhost:8000/search?term=${query}`,{\r\n                    method:'GET',\r\n            });\r\n        \r\n            const data = await response.json();\r\n            console.log(data.Result);\r\n            setResult(data.Result);\r\n            \r\n            console.log(data.Result, typeof data.Result);\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n  return (\r\n\r\n    <>\r\n    <h1>Search</h1>\r\n    <input type=\"text\" className='shadow mt-2' onChange={(e)=>{ setQuery(e.target.value)}}/> \r\n    <button type='button' onClick={getResults} className='btn mx-2 btn-secondary'>Searchüîç</button>\r\n    <h4 className='mt-5'>Result</h4>\r\n\r\n    <div className=\"container text-center m-5\">\r\n        <div className=\"row row-cols-auto\">\r\n        { \r\n        \r\n        result?.map((item)=>{\r\n                return(\r\n                    \r\n                <div className=\"col\" key={item._id}>\r\n                <div className=\"card text-bg-info mb-3\" style={{width: \"18rem\"}}>\r\n                <img src={item.imageUrl} alt=\"image\" class=\"imgFluid\" /> \r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title text-light\">{item.company.name}</h4>\r\n                        <h6 className=\"card-title\">{item.headline}</h6>\r\n                        <p className=\"card-text\">{item.description}</p>\r\n                        <p className=\"card-text\">{item.primaryText}</p>\r\n                        <button href=\"#\" className=\"btn btn-primary\">{item.CTA}</button>\r\n                        <a href={item.company.url} className=\"btn ml-2 btn-success\">Visit</a>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n\r\n                )\r\n            })\r\n\r\n        }\r\n        </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n",{"ruleId":"24","severity":1,"message":"25","line":43,"column":17,"nodeType":"26","endLine":43,"endColumn":73},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don‚Äôt need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]